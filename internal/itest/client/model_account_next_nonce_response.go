/*
SIGHTAI-SERVICES

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AccountNextNonceResponse struct for AccountNextNonceResponse
type AccountNextNonceResponse struct {
	// the next available nonce
	NextNonce *int32 `json:"next_nonce,omitempty"`
}

// NewAccountNextNonceResponse instantiates a new AccountNextNonceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountNextNonceResponse() *AccountNextNonceResponse {
	this := AccountNextNonceResponse{}
	return &this
}

// NewAccountNextNonceResponseWithDefaults instantiates a new AccountNextNonceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountNextNonceResponseWithDefaults() *AccountNextNonceResponse {
	this := AccountNextNonceResponse{}
	return &this
}

// GetNextNonce returns the NextNonce field value if set, zero value otherwise.
func (o *AccountNextNonceResponse) GetNextNonce() int32 {
	if o == nil || o.NextNonce == nil {
		var ret int32
		return ret
	}
	return *o.NextNonce
}

// GetNextNonceOk returns a tuple with the NextNonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountNextNonceResponse) GetNextNonceOk() (*int32, bool) {
	if o == nil || o.NextNonce == nil {
		return nil, false
	}
	return o.NextNonce, true
}

// HasNextNonce returns a boolean if a field has been set.
func (o *AccountNextNonceResponse) HasNextNonce() bool {
	if o != nil && o.NextNonce != nil {
		return true
	}

	return false
}

// SetNextNonce gets a reference to the given int32 and assigns it to the NextNonce field.
func (o *AccountNextNonceResponse) SetNextNonce(v int32) {
	o.NextNonce = &v
}

func (o AccountNextNonceResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NextNonce != nil {
		toSerialize["next_nonce"] = o.NextNonce
	}
	return json.Marshal(toSerialize)
}

type NullableAccountNextNonceResponse struct {
	value *AccountNextNonceResponse
	isSet bool
}

func (v NullableAccountNextNonceResponse) Get() *AccountNextNonceResponse {
	return v.value
}

func (v *NullableAccountNextNonceResponse) Set(val *AccountNextNonceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountNextNonceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountNextNonceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountNextNonceResponse(val *AccountNextNonceResponse) *NullableAccountNextNonceResponse {
	return &NullableAccountNextNonceResponse{value: val, isSet: true}
}

func (v NullableAccountNextNonceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountNextNonceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


