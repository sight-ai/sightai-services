/*
SIGHTAI-SERVICES

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AllowancesResponse struct for AllowancesResponse
type AllowancesResponse struct {
	FromAllowances []Allowance `json:"from_allowances,omitempty"`
	ToAllowances []Allowance `json:"to_allowances,omitempty"`
}

// NewAllowancesResponse instantiates a new AllowancesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowancesResponse() *AllowancesResponse {
	this := AllowancesResponse{}
	return &this
}

// NewAllowancesResponseWithDefaults instantiates a new AllowancesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowancesResponseWithDefaults() *AllowancesResponse {
	this := AllowancesResponse{}
	return &this
}

// GetFromAllowances returns the FromAllowances field value if set, zero value otherwise.
func (o *AllowancesResponse) GetFromAllowances() []Allowance {
	if o == nil || o.FromAllowances == nil {
		var ret []Allowance
		return ret
	}
	return o.FromAllowances
}

// GetFromAllowancesOk returns a tuple with the FromAllowances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowancesResponse) GetFromAllowancesOk() ([]Allowance, bool) {
	if o == nil || o.FromAllowances == nil {
		return nil, false
	}
	return o.FromAllowances, true
}

// HasFromAllowances returns a boolean if a field has been set.
func (o *AllowancesResponse) HasFromAllowances() bool {
	if o != nil && o.FromAllowances != nil {
		return true
	}

	return false
}

// SetFromAllowances gets a reference to the given []Allowance and assigns it to the FromAllowances field.
func (o *AllowancesResponse) SetFromAllowances(v []Allowance) {
	o.FromAllowances = v
}

// GetToAllowances returns the ToAllowances field value if set, zero value otherwise.
func (o *AllowancesResponse) GetToAllowances() []Allowance {
	if o == nil || o.ToAllowances == nil {
		var ret []Allowance
		return ret
	}
	return o.ToAllowances
}

// GetToAllowancesOk returns a tuple with the ToAllowances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowancesResponse) GetToAllowancesOk() ([]Allowance, bool) {
	if o == nil || o.ToAllowances == nil {
		return nil, false
	}
	return o.ToAllowances, true
}

// HasToAllowances returns a boolean if a field has been set.
func (o *AllowancesResponse) HasToAllowances() bool {
	if o != nil && o.ToAllowances != nil {
		return true
	}

	return false
}

// SetToAllowances gets a reference to the given []Allowance and assigns it to the ToAllowances field.
func (o *AllowancesResponse) SetToAllowances(v []Allowance) {
	o.ToAllowances = v
}

func (o AllowancesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FromAllowances != nil {
		toSerialize["from_allowances"] = o.FromAllowances
	}
	if o.ToAllowances != nil {
		toSerialize["to_allowances"] = o.ToAllowances
	}
	return json.Marshal(toSerialize)
}

type NullableAllowancesResponse struct {
	value *AllowancesResponse
	isSet bool
}

func (v NullableAllowancesResponse) Get() *AllowancesResponse {
	return v.value
}

func (v *NullableAllowancesResponse) Set(val *AllowancesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowancesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowancesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowancesResponse(val *AllowancesResponse) *NullableAllowancesResponse {
	return &NullableAllowancesResponse{value: val, isSet: true}
}

func (v NullableAllowancesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowancesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


