/*
SIGHTAI-SERVICES

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Transaction struct for Transaction
type Transaction struct {
	Id int64 `json:"id"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	AccountId int64 `json:"account_id"`
	AvailableDelta *string `json:"available_delta,omitempty"`
	HoldDelta *string `json:"hold_delta,omitempty"`
	Type *string `json:"type,omitempty"`
	Notes *string `json:"notes,omitempty"`
}

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction(id int64, accountId int64) *Transaction {
	this := Transaction{}
	this.Id = id
	this.AccountId = accountId
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetId returns the Id field value
func (o *Transaction) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Transaction) SetId(v int64) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Transaction) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Transaction) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Transaction) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetAccountId returns the AccountId field value
func (o *Transaction) GetAccountId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *Transaction) GetAccountIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *Transaction) SetAccountId(v int64) {
	o.AccountId = v
}

// GetAvailableDelta returns the AvailableDelta field value if set, zero value otherwise.
func (o *Transaction) GetAvailableDelta() string {
	if o == nil || o.AvailableDelta == nil {
		var ret string
		return ret
	}
	return *o.AvailableDelta
}

// GetAvailableDeltaOk returns a tuple with the AvailableDelta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetAvailableDeltaOk() (*string, bool) {
	if o == nil || o.AvailableDelta == nil {
		return nil, false
	}
	return o.AvailableDelta, true
}

// HasAvailableDelta returns a boolean if a field has been set.
func (o *Transaction) HasAvailableDelta() bool {
	if o != nil && o.AvailableDelta != nil {
		return true
	}

	return false
}

// SetAvailableDelta gets a reference to the given string and assigns it to the AvailableDelta field.
func (o *Transaction) SetAvailableDelta(v string) {
	o.AvailableDelta = &v
}

// GetHoldDelta returns the HoldDelta field value if set, zero value otherwise.
func (o *Transaction) GetHoldDelta() string {
	if o == nil || o.HoldDelta == nil {
		var ret string
		return ret
	}
	return *o.HoldDelta
}

// GetHoldDeltaOk returns a tuple with the HoldDelta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetHoldDeltaOk() (*string, bool) {
	if o == nil || o.HoldDelta == nil {
		return nil, false
	}
	return o.HoldDelta, true
}

// HasHoldDelta returns a boolean if a field has been set.
func (o *Transaction) HasHoldDelta() bool {
	if o != nil && o.HoldDelta != nil {
		return true
	}

	return false
}

// SetHoldDelta gets a reference to the given string and assigns it to the HoldDelta field.
func (o *Transaction) SetHoldDelta(v string) {
	o.HoldDelta = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Transaction) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Transaction) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Transaction) SetType(v string) {
	o.Type = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Transaction) GetNotes() string {
	if o == nil || o.Notes == nil {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetNotesOk() (*string, bool) {
	if o == nil || o.Notes == nil {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Transaction) HasNotes() bool {
	if o != nil && o.Notes != nil {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Transaction) SetNotes(v string) {
	o.Notes = &v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["account_id"] = o.AccountId
	}
	if o.AvailableDelta != nil {
		toSerialize["available_delta"] = o.AvailableDelta
	}
	if o.HoldDelta != nil {
		toSerialize["hold_delta"] = o.HoldDelta
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Notes != nil {
		toSerialize["notes"] = o.Notes
	}
	return json.Marshal(toSerialize)
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


