/*
SIGHTAI-SERVICES

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReceiptsResponse struct for ReceiptsResponse
type ReceiptsResponse struct {
	Receipts []Receipt `json:"receipts,omitempty"`
}

// NewReceiptsResponse instantiates a new ReceiptsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReceiptsResponse() *ReceiptsResponse {
	this := ReceiptsResponse{}
	return &this
}

// NewReceiptsResponseWithDefaults instantiates a new ReceiptsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReceiptsResponseWithDefaults() *ReceiptsResponse {
	this := ReceiptsResponse{}
	return &this
}

// GetReceipts returns the Receipts field value if set, zero value otherwise.
func (o *ReceiptsResponse) GetReceipts() []Receipt {
	if o == nil || o.Receipts == nil {
		var ret []Receipt
		return ret
	}
	return o.Receipts
}

// GetReceiptsOk returns a tuple with the Receipts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReceiptsResponse) GetReceiptsOk() ([]Receipt, bool) {
	if o == nil || o.Receipts == nil {
		return nil, false
	}
	return o.Receipts, true
}

// HasReceipts returns a boolean if a field has been set.
func (o *ReceiptsResponse) HasReceipts() bool {
	if o != nil && o.Receipts != nil {
		return true
	}

	return false
}

// SetReceipts gets a reference to the given []Receipt and assigns it to the Receipts field.
func (o *ReceiptsResponse) SetReceipts(v []Receipt) {
	o.Receipts = v
}

func (o ReceiptsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Receipts != nil {
		toSerialize["receipts"] = o.Receipts
	}
	return json.Marshal(toSerialize)
}

type NullableReceiptsResponse struct {
	value *ReceiptsResponse
	isSet bool
}

func (v NullableReceiptsResponse) Get() *ReceiptsResponse {
	return v.value
}

func (v *NullableReceiptsResponse) Set(val *ReceiptsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReceiptsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReceiptsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReceiptsResponse(val *ReceiptsResponse) *NullableReceiptsResponse {
	return &NullableReceiptsResponse{value: val, isSet: true}
}

func (v NullableReceiptsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReceiptsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


