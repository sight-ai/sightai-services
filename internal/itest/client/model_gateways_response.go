/*
SIGHTAI-SERVICES

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GatewaysResponse struct for GatewaysResponse
type GatewaysResponse struct {
	Gateways []Gateway `json:"gateways,omitempty"`
}

// NewGatewaysResponse instantiates a new GatewaysResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGatewaysResponse() *GatewaysResponse {
	this := GatewaysResponse{}
	return &this
}

// NewGatewaysResponseWithDefaults instantiates a new GatewaysResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGatewaysResponseWithDefaults() *GatewaysResponse {
	this := GatewaysResponse{}
	return &this
}

// GetGateways returns the Gateways field value if set, zero value otherwise.
func (o *GatewaysResponse) GetGateways() []Gateway {
	if o == nil || o.Gateways == nil {
		var ret []Gateway
		return ret
	}
	return o.Gateways
}

// GetGatewaysOk returns a tuple with the Gateways field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewaysResponse) GetGatewaysOk() ([]Gateway, bool) {
	if o == nil || o.Gateways == nil {
		return nil, false
	}
	return o.Gateways, true
}

// HasGateways returns a boolean if a field has been set.
func (o *GatewaysResponse) HasGateways() bool {
	if o != nil && o.Gateways != nil {
		return true
	}

	return false
}

// SetGateways gets a reference to the given []Gateway and assigns it to the Gateways field.
func (o *GatewaysResponse) SetGateways(v []Gateway) {
	o.Gateways = v
}

func (o GatewaysResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Gateways != nil {
		toSerialize["gateways"] = o.Gateways
	}
	return json.Marshal(toSerialize)
}

type NullableGatewaysResponse struct {
	value *GatewaysResponse
	isSet bool
}

func (v NullableGatewaysResponse) Get() *GatewaysResponse {
	return v.value
}

func (v *NullableGatewaysResponse) Set(val *GatewaysResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGatewaysResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGatewaysResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGatewaysResponse(val *GatewaysResponse) *NullableGatewaysResponse {
	return &NullableGatewaysResponse{value: val, isSet: true}
}

func (v NullableGatewaysResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGatewaysResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


