/*
SIGHTAI-SERVICES

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Allowance struct for Allowance
type Allowance struct {
	Id *int64 `json:"id,omitempty"`
	FromAccount *int64 `json:"from_account,omitempty"`
	ToAccount *int64 `json:"to_account,omitempty"`
	Allowance *string `json:"allowance,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewAllowance instantiates a new Allowance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowance() *Allowance {
	this := Allowance{}
	return &this
}

// NewAllowanceWithDefaults instantiates a new Allowance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowanceWithDefaults() *Allowance {
	this := Allowance{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Allowance) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allowance) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Allowance) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Allowance) SetId(v int64) {
	o.Id = &v
}

// GetFromAccount returns the FromAccount field value if set, zero value otherwise.
func (o *Allowance) GetFromAccount() int64 {
	if o == nil || o.FromAccount == nil {
		var ret int64
		return ret
	}
	return *o.FromAccount
}

// GetFromAccountOk returns a tuple with the FromAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allowance) GetFromAccountOk() (*int64, bool) {
	if o == nil || o.FromAccount == nil {
		return nil, false
	}
	return o.FromAccount, true
}

// HasFromAccount returns a boolean if a field has been set.
func (o *Allowance) HasFromAccount() bool {
	if o != nil && o.FromAccount != nil {
		return true
	}

	return false
}

// SetFromAccount gets a reference to the given int64 and assigns it to the FromAccount field.
func (o *Allowance) SetFromAccount(v int64) {
	o.FromAccount = &v
}

// GetToAccount returns the ToAccount field value if set, zero value otherwise.
func (o *Allowance) GetToAccount() int64 {
	if o == nil || o.ToAccount == nil {
		var ret int64
		return ret
	}
	return *o.ToAccount
}

// GetToAccountOk returns a tuple with the ToAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allowance) GetToAccountOk() (*int64, bool) {
	if o == nil || o.ToAccount == nil {
		return nil, false
	}
	return o.ToAccount, true
}

// HasToAccount returns a boolean if a field has been set.
func (o *Allowance) HasToAccount() bool {
	if o != nil && o.ToAccount != nil {
		return true
	}

	return false
}

// SetToAccount gets a reference to the given int64 and assigns it to the ToAccount field.
func (o *Allowance) SetToAccount(v int64) {
	o.ToAccount = &v
}

// GetAllowance returns the Allowance field value if set, zero value otherwise.
func (o *Allowance) GetAllowance() string {
	if o == nil || o.Allowance == nil {
		var ret string
		return ret
	}
	return *o.Allowance
}

// GetAllowanceOk returns a tuple with the Allowance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allowance) GetAllowanceOk() (*string, bool) {
	if o == nil || o.Allowance == nil {
		return nil, false
	}
	return o.Allowance, true
}

// HasAllowance returns a boolean if a field has been set.
func (o *Allowance) HasAllowance() bool {
	if o != nil && o.Allowance != nil {
		return true
	}

	return false
}

// SetAllowance gets a reference to the given string and assigns it to the Allowance field.
func (o *Allowance) SetAllowance(v string) {
	o.Allowance = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Allowance) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Allowance) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Allowance) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *Allowance) SetVersion(v int64) {
	o.Version = &v
}

func (o Allowance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.FromAccount != nil {
		toSerialize["from_account"] = o.FromAccount
	}
	if o.ToAccount != nil {
		toSerialize["to_account"] = o.ToAccount
	}
	if o.Allowance != nil {
		toSerialize["allowance"] = o.Allowance
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableAllowance struct {
	value *Allowance
	isSet bool
}

func (v NullableAllowance) Get() *Allowance {
	return v.value
}

func (v *NullableAllowance) Set(val *Allowance) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowance) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowance(val *Allowance) *NullableAllowance {
	return &NullableAllowance{value: val, isSet: true}
}

func (v NullableAllowance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


